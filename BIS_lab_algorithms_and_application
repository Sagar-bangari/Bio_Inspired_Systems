{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNQAR5XzM1Fkpe6nndxP1HQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sagar-bangari/Bio_Inspired_Systems/blob/main/BIS_lab_algorithms_and_application\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dqVbL0EYm0GT",
        "outputId": "b8be52cc-6ad8-4e1d-f21c-82b6e2e8807c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration 10/100 - Best Fitness: 1.0251845433222897\n",
            "Iteration 20/100 - Best Fitness: 0.9959230190347483\n",
            "Iteration 30/100 - Best Fitness: 0.994962212703804\n",
            "Iteration 40/100 - Best Fitness: 0.99495911606531\n",
            "Iteration 50/100 - Best Fitness: 0.994959057653098\n",
            "Iteration 60/100 - Best Fitness: 0.9949590570933111\n",
            "Iteration 70/100 - Best Fitness: 0.9949590570932898\n",
            "Iteration 80/100 - Best Fitness: 0.9949590570932898\n",
            "Iteration 90/100 - Best Fitness: 0.9949590570932898\n",
            "Iteration 100/100 - Best Fitness: 0.9949590570932898\n",
            "\n",
            "Best Solution Found:\n",
            "Position: [ 6.32598038e-10 -9.94958636e-01]\n",
            "Fitness: 0.9949590570932898\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import random\n",
        "\n",
        "# Define the optimization problem (Rastrigin Function)\n",
        "def rastrigin(x):\n",
        "    A = 10\n",
        "    return A * len(x) + sum([(xi**2 - A * np.cos(2 * np.pi * xi)) for xi in x])\n",
        "\n",
        "# Particle Swarm Optimization (PSO) implementation\n",
        "class Particle:\n",
        "    def __init__(self, dimension, lower_bound, upper_bound):\n",
        "        # Initialize the particle position and velocity randomly\n",
        "        self.position = np.random.uniform(lower_bound, upper_bound, dimension)\n",
        "        self.velocity = np.random.uniform(-1, 1, dimension)\n",
        "        self.best_position = np.copy(self.position)\n",
        "        self.best_value = rastrigin(self.position)\n",
        "\n",
        "    def update_velocity(self, global_best_position, w, c1, c2):\n",
        "        # Update the velocity of the particle\n",
        "        r1 = np.random.rand(len(self.position))\n",
        "        r2 = np.random.rand(len(self.position))\n",
        "\n",
        "        # Inertia term\n",
        "        inertia = w * self.velocity\n",
        "\n",
        "        # Cognitive term (individual best)\n",
        "        cognitive = c1 * r1 * (self.best_position - self.position)\n",
        "\n",
        "        # Social term (global best)\n",
        "        social = c2 * r2 * (global_best_position - self.position)\n",
        "\n",
        "        # Update velocity\n",
        "        self.velocity = inertia + cognitive + social\n",
        "\n",
        "    def update_position(self, lower_bound, upper_bound):\n",
        "        # Update the position of the particle\n",
        "        self.position = self.position + self.velocity\n",
        "\n",
        "        # Ensure the particle stays within the bounds\n",
        "        self.position = np.clip(self.position, lower_bound, upper_bound)\n",
        "\n",
        "    def evaluate(self):\n",
        "        # Evaluate the fitness of the particle\n",
        "        fitness = rastrigin(self.position)\n",
        "\n",
        "        # Update the particle's best position if necessary\n",
        "        if fitness < self.best_value:\n",
        "            self.best_value = fitness\n",
        "            self.best_position = np.copy(self.position)\n",
        "\n",
        "def particle_swarm_optimization(dim, lower_bound, upper_bound, num_particles=30, max_iter=100, w=0.5, c1=1.5, c2=1.5):\n",
        "    # Initialize particles\n",
        "    particles = [Particle(dim, lower_bound, upper_bound) for _ in range(num_particles)]\n",
        "\n",
        "    # Initialize the global best position and value\n",
        "    global_best_position = particles[0].best_position\n",
        "    global_best_value = particles[0].best_value\n",
        "\n",
        "    for i in range(max_iter):\n",
        "        # Update each particle\n",
        "        for particle in particles:\n",
        "            particle.update_velocity(global_best_position, w, c1, c2)\n",
        "            particle.update_position(lower_bound, upper_bound)\n",
        "            particle.evaluate()\n",
        "\n",
        "            # Update global best position if needed\n",
        "            if particle.best_value < global_best_value:\n",
        "                global_best_value = particle.best_value\n",
        "                global_best_position = np.copy(particle.best_position)\n",
        "\n",
        "        # Optionally print the progress\n",
        "        if (i+1 ) % 10 == 0:\n",
        "            print(f\"Iteration {i+1 }/{max_iter} - Best Fitness: {global_best_value}\")\n",
        "\n",
        "    return global_best_position, global_best_value\n",
        "\n",
        "# Set the parameters for the PSO algorithm\n",
        "dim = 2                # Number of dimensions for the function\n",
        "lower_bound = -5  # Lower bound of the search space\n",
        "upper_bound = 5     # Upper bound of the search space\n",
        "num_particles = 30     # Number of particles in the swarm\n",
        "max_iter = 100         # Number of iterations\n",
        "\n",
        "# Run the PSO\n",
        "best_position, best_value = particle_swarm_optimization(dim, lower_bound, upper_bound, num_particles, max_iter)\n",
        "\n",
        "# Output the best solution found\n",
        "print(\"\\nBest Solution Found:\")\n",
        "print(\"Position:\", best_position)\n",
        "print(\"Fitness:\", best_value)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "class Particle:\n",
        "    def __init__(self, dim, lower_bound, upper_bound):\n",
        "        self.position = np.random.uniform(lower_bound, upper_bound, dim)\n",
        "        self.velocity = np.random.uniform(-1, 1, dim)\n",
        "        self.pbest_position = np.copy(self.position)\n",
        "        self.pbest_value = np.inf\n",
        "        self.objectives = None  # Stores the objectives of the particle\n",
        "\n",
        "    def evaluate_objectives(self, objective_functions):\n",
        "        # Evaluate the objectives (cost and performance)\n",
        "        self.objectives = [func(self.position) for func in objective_functions]\n",
        "        return self.objectives\n",
        "\n",
        "    def update_velocity(self, global_best_position, inertia_weight, cognitive_coeff, social_coeff):\n",
        "        # Update velocity using PSO formula\n",
        "        r1, r2 = np.random.rand(2)\n",
        "        cognitive_velocity = cognitive_coeff * r1 * (self.pbest_position - self.position)\n",
        "        social_velocity = social_coeff * r2 * (global_best_position - self.position)\n",
        "        self.velocity = inertia_weight * self.velocity + cognitive_velocity + social_velocity\n",
        "\n",
        "    def update_position(self, lower_bound, upper_bound):\n",
        "        # Update position based on velocity\n",
        "        self.position += self.velocity\n",
        "        # Ensure particles stay within bounds\n",
        "        self.position = np.clip(self.position, lower_bound, upper_bound)\n",
        "\n",
        "    def update_pbest(self):\n",
        "        # Update personal best if the current position is better\n",
        "        if self.objectives[0] < self.pbest_value:  # Assuming we minimize the first objective (cost)\n",
        "            self.pbest_value = self.objectives[0]\n",
        "            self.pbest_position = np.copy(self.position)\n",
        "\n",
        "\n",
        "def pareto_dominates(particle1, particle2):\n",
        "    # Check if particle1 dominates particle2 (minimize cost, maximize performance)\n",
        "    dominates = False\n",
        "    for obj1, obj2 in zip(particle1.objectives, particle2.objectives):\n",
        "        if obj1 > obj2:  # If particle1 is worse than particle2 in any objective, it doesn't dominate\n",
        "            return False\n",
        "        if obj1 < obj2:  # If particle1 is better in any objective, it dominates\n",
        "            dominates = True\n",
        "    return dominates\n",
        "\n",
        "\n",
        "def update_pareto_front(particles, pareto_front):\n",
        "    new_front = []\n",
        "    for particle in particles:\n",
        "        is_dominated = False\n",
        "        for other in pareto_front:\n",
        "            if pareto_dominates(other, particle):\n",
        "                is_dominated = True\n",
        "                break\n",
        "        if not is_dominated:\n",
        "            new_front.append(particle)\n",
        "\n",
        "    # Now remove dominated particles from the Pareto front\n",
        "    pareto_front = []\n",
        "    for particle in new_front:\n",
        "        dominated = False\n",
        "        for other in new_front:\n",
        "            if pareto_dominates(particle, other):\n",
        "                dominated = True\n",
        "                break\n",
        "        if not dominated:\n",
        "            pareto_front.append(particle)\n",
        "    return pareto_front\n",
        "\n",
        "\n",
        "def mpspso(objective_functions, num_particles, max_generations, dim, lower_bound, upper_bound, inertia_weight=0.7, cognitive_coeff=1.5, social_coeff=1.5):\n",
        "    # Initialize particles\n",
        "    particles = [Particle(dim, lower_bound, upper_bound) for _ in range(num_particles)]\n",
        "\n",
        "    # Initialize Pareto front (archive)\n",
        "    pareto_front = []\n",
        "\n",
        "    # Main loop\n",
        "    for generation in range(max_generations):\n",
        "        # Evaluate objectives and update personal best\n",
        "        for particle in particles:\n",
        "            objectives = particle.evaluate_objectives(objective_functions)\n",
        "            particle.update_pbest()\n",
        "\n",
        "        # Update Pareto front\n",
        "        pareto_front = update_pareto_front(particles, pareto_front)\n",
        "\n",
        "        # Update particles' velocity and position\n",
        "        global_best_position = np.mean([p.pbest_position for p in pareto_front], axis=0)  # Use average of pbest in Pareto front\n",
        "        for particle in particles:\n",
        "            particle.update_velocity(global_best_position, inertia_weight, cognitive_coeff, social_coeff)\n",
        "            particle.update_position(lower_bound, upper_bound)\n",
        "\n",
        "        # Optionally, check for stopping criteria\n",
        "        if generation % 1000 == 0:\n",
        "            print(f\"Generation {generation}, Pareto front size: {len(pareto_front)}\")\n",
        "\n",
        "    return pareto_front\n",
        "\n",
        "\n",
        "# Example objective functions (cost and performance)\n",
        "def cost_function(position):\n",
        "    # Simple cost function: sum of squares\n",
        "    return np.sum(position ** 2)\n",
        "\n",
        "def performance_function(position):\n",
        "    # Simple performance function: negative sum of squares (we want to maximize this)\n",
        "    return -np.sum(position ** 2)\n",
        "\n",
        "# Set parameters\n",
        "dim = 2  # Problem dimensionality\n",
        "num_particles = 100\n",
        "max_generations = 1000\n",
        "lower_bound = -10\n",
        "upper_bound = 10\n",
        "\n",
        "# List of objective functions\n",
        "objective_functions = [cost_function, performance_function]\n",
        "\n",
        "# Run the Multi-Objective PSO\n",
        "pareto_front = mpspso(objective_functions, num_particles, max_generations, dim, lower_bound, upper_bound)\n",
        "\n",
        "# Output the Pareto front (best solutions found)\n",
        "for idx, particle in enumerate(pareto_front):\n",
        "   if idx % 10 == 0:\n",
        "    print(f\"Generation {idx + 1}: Position = {particle.pbest_position}, Objectives = {particle.objectives}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h_l8uZYRrLUV",
        "outputId": "1924460c-6299-455a-b3ac-c80d5d2769bb"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generation 0, Pareto front size: 100\n",
            "Generation 1: Position = [1.32572344e-37 1.36143166e-37], Objectives = [3.61103879895578e-74, -3.61103879895578e-74]\n",
            "Generation 11: Position = [1.21219856e-37 2.13410958e-38], Objectives = [1.5149695888082015e-74, -1.5149695888082015e-74]\n",
            "Generation 21: Position = [-4.31451375e-38  2.96750757e-38], Objectives = [3.183843666065432e-73, -3.183843666065432e-73]\n",
            "Generation 31: Position = [ 1.26509197e-37 -6.43717608e-38], Objectives = [2.0148300543372515e-74, -2.0148300543372515e-74]\n",
            "Generation 41: Position = [1.45648988e-37 4.26175236e-38], Objectives = [5.6640516112531475e-74, -5.6640516112531475e-74]\n",
            "Generation 51: Position = [4.39712992e-38 3.40883395e-39], Objectives = [4.779955701784882e-74, -4.779955701784882e-74]\n",
            "Generation 61: Position = [-2.10283797e-38  2.01883000e-39], Objectives = [4.7540489629262976e-74, -4.7540489629262976e-74]\n",
            "Generation 71: Position = [1.60840189e-37 3.18586353e-39], Objectives = [2.58797162183862e-74, -2.58797162183862e-74]\n",
            "Generation 81: Position = [ 7.67576669e-38 -1.01348538e-37], Objectives = [2.367087161768527e-74, -2.367087161768527e-74]\n",
            "Generation 91: Position = [ 1.39488747e-37 -3.33663535e-38], Objectives = [2.0570424049217377e-74, -2.0570424049217377e-74]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Ug139UU8vyZt"
      },
      "execution_count": 13,
      "outputs": []
    }
  ]
}